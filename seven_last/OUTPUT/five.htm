<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OUTPUT\five.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OUTPUT\five.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Fri Apr 07 22:45:10 2017
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[25e916c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25e8dac]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25e8dac]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25e9004]">Reset_Handler</a>
 <LI><a href="#[25df338]">NMI_Handler</a>
 <LI><a href="#[25df2fc]">HardFault_Handler</a>
 <LI><a href="#[25df2c0]">MemManage_Handler</a>
 <LI><a href="#[25df284]">BusFault_Handler</a>
 <LI><a href="#[25df248]">UsageFault_Handler</a>
 <LI><a href="#[25df1d0]">SVC_Handler</a>
 <LI><a href="#[25df20c]">DebugMon_Handler</a>
 <LI><a href="#[25df194]">PendSV_Handler</a>
 <LI><a href="#[25df158]">SysTick_Handler</a>
 <LI><a href="#[25e83d4]">WWDG_IRQHandler</a>
 <LI><a href="#[25e8884]">PVD_IRQHandler</a>
 <LI><a href="#[25e871c]">TAMPER_IRQHandler</a>
 <LI><a href="#[25df11c]">RTC_IRQHandler</a>
 <LI><a href="#[25e89b0]">FLASH_IRQHandler</a>
 <LI><a href="#[25e8848]">RCC_IRQHandler</a>
 <LI><a href="#[25e8b54]">EXTI0_IRQHandler</a>
 <LI><a href="#[25e8adc]">EXTI1_IRQHandler</a>
 <LI><a href="#[25e8aa0]">EXTI2_IRQHandler</a>
 <LI><a href="#[25e8a64]">EXTI3_IRQHandler</a>
 <LI><a href="#[25e8a28]">EXTI4_IRQHandler</a>
 <LI><a href="#[25e8cf8]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[25e8cbc]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[25e8c80]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[25e8c44]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[25e8c08]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[25e8bcc]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[25e8b90]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[25e8dac]">ADC1_2_IRQHandler</a>
 <LI><a href="#[25e844c]">USB_HP_CAN1_TX_IRQHandler</a>
 <LI><a href="#[25e8410]">USB_LP_CAN1_RX0_IRQHandler</a>
 <LI><a href="#[25e8d70]">CAN1_RX1_IRQHandler</a>
 <LI><a href="#[25e8d34]">CAN1_SCE_IRQHandler</a>
 <LI><a href="#[25e89ec]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[25e86e0]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[25e862c]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[25e8668]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[25e86a4]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[25e85f0]">TIM2_IRQHandler</a>
 <LI><a href="#[25e85b4]">TIM3_IRQHandler</a>
 <LI><a href="#[25e8578]">TIM4_IRQHandler</a>
 <LI><a href="#[25e8938]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[25e8974]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[25e88c0]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[25e88fc]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[25e8794]">SPI1_IRQHandler</a>
 <LI><a href="#[25e8758]">SPI2_IRQHandler</a>
 <LI><a href="#[25e853c]">USART1_IRQHandler</a>
 <LI><a href="#[25df0e0]">USART2_IRQHandler</a>
 <LI><a href="#[25e84c4]">USART3_IRQHandler</a>
 <LI><a href="#[25e8b18]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[25e880c]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[25e8488]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[25e90b8]">SystemInit</a>
 <LI><a href="#[25dd718]">__main</a>
 <LI><a href="#[25dbfa8]">_sputc</a>
 <LI><a href="#[25dc110]">_printf_input_char</a>
 <LI><a href="#[34ef720]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25dd718]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[25dc890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[34ed560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[34ed560]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25dd718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[34ed524]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25dc890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[34ed4e8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[34ed4ac]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[34ed308]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34ed308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[34ed308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[34ed218]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[25dda60]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25dc980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[25dd9ac]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25dde20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[25ddb14]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[25de528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25dbef4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[34f2b28]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f09a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25db24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[34f1bb0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[34f1a84]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[34f4748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[34f1ac0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[34f1b38]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[34f1a0c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[34f1994]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[34f191c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[34f18e0]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[34f380c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[34f137c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[34f13f4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[34f17b4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[34f164c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[34f128c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[34f1304]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[34f16c4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[34f15d4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[34f18a4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[34f182c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[34f1250]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[34f173c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[34f155c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[34ef978]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34f074c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[34eee74]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[34eec94]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[34eec58]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[34eedc0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[34eef28]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[34eed48]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[25dc890]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25dd718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[34ed524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[25db300]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[34f49dc]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[34f317c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25db24c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f2b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[25db288]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[25db198]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; adc_r &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[34f3014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[25db1d4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[34f0cb0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34f3014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[34f074c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[34ef978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[34f0788]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[34f0710]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34efedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[25e9004]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))

<P><STRONG><a name="[25e8dac]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25e8dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25e8dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8d70]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8d34]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8cf8]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8cbc]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8c80]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8c44]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8c08]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8bcc]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8b90]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8b54]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8b18]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8adc]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8aa0]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8a64]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8a28]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e89ec]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e89b0]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8974]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8938]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e88fc]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e88c0]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8884]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8848]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e880c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8794]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8758]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e871c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e86e0]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e86a4]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8668]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e862c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e85f0]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e85b4]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8578]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e853c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e84c4]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8488]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e844c]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e8410]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e83d4]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e916c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f317c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25e6598]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e655c]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e6520]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[25e64e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[25e64e4]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e6520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[25e64a8]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e646c]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e6430]"></a>RCC_PLLConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e63f4]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e63b8]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e637c]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e6340]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e6304]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e62c8]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e628c]"></a>RCC_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e6250]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e6214]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e61d8]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e619c]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e6160]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e6124]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e60e8]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25e30dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[25e60ac]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e6070]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfe00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[25dfe3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
<LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[25dfef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
<LI><a href="#[25e1318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[25e1c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[25e6034]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
<LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e5ff8]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25e3118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[25e3cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[25e5a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[25e5ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[25e5fbc]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25e3118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[25e5350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[25e5f80]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e4dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[25e5f44]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e5f08]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e5ecc]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e5e90]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e5e54]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e5ad0]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e5ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[25e5a94]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e5ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[25e5a58]"></a>GPIO_Init</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfe00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[25dfe3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
<LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[25dfef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
<LI><a href="#[25e1318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[25e1390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BusIn
<LI><a href="#[25e13cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BusOut
<LI><a href="#[25e1c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[25e1ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output_Mode
<LI><a href="#[25e1f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input_Mode
</UL>

<P><STRONG><a name="[25e5a1c]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e59e0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dffe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[25e1e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input
</UL>

<P><STRONG><a name="[25e59a4]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e5968]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e592c]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e58f0]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfe78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_C
<LI><a href="#[25e1e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Output
<LI><a href="#[25e1e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
</UL>

<P><STRONG><a name="[25e58b4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfe78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_C
<LI><a href="#[25e1e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Output
<LI><a href="#[25e1e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
</UL>

<P><STRONG><a name="[25e5878]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e583c]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e5800]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e57c4]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e5788]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e574c]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e5710]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e56d4]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[25e5350]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e5fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[25e5314]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e52d8]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[25e529c]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[25e5260]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[25e5224]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[25e51e8]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[25e51ac]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[25e5170]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[25e4dec]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[25e5f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e4db0]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4d74]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4d38]"></a>BKP_ITConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4cfc]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4cc0]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4c84]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4c48]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4c0c]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4bd0]"></a>BKP_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4b94]"></a>BKP_GetITStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e4b58]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[25e47d4]"></a>RTC_ITConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e4798]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e466c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[25e46a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[25e46e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[25e475c]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e466c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[25e46a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[25e46e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[25e4720]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25df11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25e46e4]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[25e475c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[25e4798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[25df11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e46a8]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[25e475c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[25e4798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e466c]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e475c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[25e4798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[25e4630]"></a>RTC_GetDivider</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25e45f4]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25df11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e45b8]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[25e457c]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25e4540]"></a>RTC_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25e4504]"></a>RTC_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25df11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[25e44c8]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25df11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[25e4144]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dff68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[25e4108]"></a>NVIC_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25dff68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[25e40cc]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[25e4090]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[25e4054]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[25e3cd0]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e5ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[25e3c94]"></a>ADC_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25e3c58]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3c1c]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25e3be0]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25e3ba4]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3b68]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25e3b2c]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25e3af0]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25e3ab4]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25e3a78]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25e3a3c]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3a00]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e39c4]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3988]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[25e394c]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3910]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e010c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_r
</UL>

<P><STRONG><a name="[25e38d4]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3898]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e385c]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3820]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e37e4]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e37a8]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e376c]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3730]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e36f4]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e36b8]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e367c]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3640]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3604]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e35c8]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e358c]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3550]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3514]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e34d8]"></a>ADC_GetITStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e349c]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[25e3118]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e5fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[25e5ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[25e30dc]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[25e60e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[25e30a0]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e3064]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e3028]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2fec]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[25e2fb0]"></a>USART_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25df0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25dfef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[25e2f74]"></a>USART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2f38]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2efc]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2ec0]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2e84]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2e48]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2e0c]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e00d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_s
</UL>

<P><STRONG><a name="[25e2dd0]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25df0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[25e2d94]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2d58]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2d1c]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2ce0]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2ca4]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2c68]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2c2c]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2bf0]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2bb4]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2b78]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2b3c]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e00d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_s
</UL>

<P><STRONG><a name="[25e2b00]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e2ac4]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25df0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[25e2a88]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[25e1f0c]"></a>SDA_Input_Mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_Input_Mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25e1c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceiveByte
<LI><a href="#[25e1d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
</UL>

<P><STRONG><a name="[25e1ed0]"></a>SDA_Output_Mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_Output_Mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25e1c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceiveByte
<LI><a href="#[25e1d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
</UL>

<P><STRONG><a name="[25e1e94]"></a>SDA_Output</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[25e58b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25e58f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[25e1c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[25e1cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendNotAck
<LI><a href="#[25e1cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAck
<LI><a href="#[25e1d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[25e1da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStart
</UL>

<P><STRONG><a name="[25e1e58]"></a>SCL_Output</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[25e58b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25e58f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[25e1c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceiveByte
<LI><a href="#[25e1c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[25e1cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendNotAck
<LI><a href="#[25e1cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAck
<LI><a href="#[25e1d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
<LI><a href="#[25e1d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[25e1da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStart
</UL>

<P><STRONG><a name="[25e1e1c]"></a>SDA_Input</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[25e59e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[25e1c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceiveByte
<LI><a href="#[25e1d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
</UL>

<P><STRONG><a name="[25e1de0]"></a>delay1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e1c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceiveByte
<LI><a href="#[25e1c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[25e1cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendNotAck
<LI><a href="#[25e1cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendAck
<LI><a href="#[25e1d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
<LI><a href="#[25e1d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[25e1da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStart
</UL>

<P><STRONG><a name="[25e1da4]"></a>I2CStart</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CStart &rArr; SCL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
<LI><a href="#[25e1e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Output
<LI><a href="#[25e1e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[25dffa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_v
<LI><a href="#[25e001c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_v
</UL>

<P><STRONG><a name="[25e1d68]"></a>I2CStop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CStop &rArr; SCL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
<LI><a href="#[25e1e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Output
<LI><a href="#[25e1e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[25dffa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_v
<LI><a href="#[25e001c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_v
<LI><a href="#[25e1d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
</UL>

<P><STRONG><a name="[25e1d2c]"></a>I2CWaitAck</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2CWaitAck &rArr; SDA_Output_Mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[25e1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
<LI><a href="#[25e1e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input
<LI><a href="#[25e1e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Output
<LI><a href="#[25e1ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output_Mode
<LI><a href="#[25e1f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[25dffa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_v
<LI><a href="#[25e001c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_v
</UL>

<P><STRONG><a name="[25e1cf0]"></a>I2CSendAck</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
<LI><a href="#[25e1e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Output
<LI><a href="#[25e1e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
</UL>

<P><STRONG><a name="[25e1cb4]"></a>I2CSendNotAck</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
<LI><a href="#[25e1e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Output
<LI><a href="#[25e1e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
</UL>

<P><STRONG><a name="[25e1c78]"></a>I2CSendByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2CSendByte &rArr; SCL_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
<LI><a href="#[25e1e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Output
<LI><a href="#[25e1e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[25dffa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_v
<LI><a href="#[25e001c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_v
</UL>

<P><STRONG><a name="[25e1c3c]"></a>I2CReceiveByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2CReceiveByte &rArr; SDA_Output_Mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
<LI><a href="#[25e1e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input
<LI><a href="#[25e1e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_Output
<LI><a href="#[25e1ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Output_Mode
<LI><a href="#[25e1f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_Input_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[25dffa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_v
</UL>

<P><STRONG><a name="[25e1c00]"></a>i2c_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[25e6070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25e14bc]"></a>Delay_LCD</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e0e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PowerOn
<LI><a href="#[25e1408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_932X_Init
<LI><a href="#[25e1444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_8230_Init
</UL>

<P><STRONG><a name="[25e1480]"></a>LCD_WriteReg</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e0df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[25e0e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[25e0e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PowerOn
<LI><a href="#[25e0ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[25e100c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
<LI><a href="#[25e1048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[25e1228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[25e1408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_932X_Init
<LI><a href="#[25e1444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_8230_Init
</UL>

<P><STRONG><a name="[25e1444]"></a>REG_8230_Init</STRONG> (Thumb, 288 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = REG_8230_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[25e14bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[25e12dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210B_LCD_Init
</UL>

<P><STRONG><a name="[25e1408]"></a>REG_932X_Init</STRONG> (Thumb, 514 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = REG_932X_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[25e14bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[25e12dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210B_LCD_Init
</UL>

<P><STRONG><a name="[25e13cc]"></a>LCD_BusOut</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_BusOut &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25e0ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRAM
<LI><a href="#[25e1318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[25e1354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[25e1390]"></a>LCD_BusIn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_BusIn &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25e0ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRAM
<LI><a href="#[25e1354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[25e1354]"></a>LCD_ReadReg</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_ReadReg &rArr; LCD_BusIn &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BusIn
<LI><a href="#[25e13cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BusOut
</UL>
<BR>[Called By]<UL><LI><a href="#[25e12dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210B_LCD_Init
</UL>

<P><STRONG><a name="[25e1318]"></a>LCD_CtrlLinesConfig</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_CtrlLinesConfig &rArr; LCD_BusOut &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e13cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BusOut
<LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[25e6070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25e12dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210B_LCD_Init
</UL>

<P><STRONG><a name="[25e12dc]"></a>STM3210B_LCD_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STM3210B_LCD_Init &rArr; LCD_ReadReg &rArr; LCD_BusIn &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlLinesConfig
<LI><a href="#[25e1354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[25e1408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_932X_Init
<LI><a href="#[25e1444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REG_8230_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfdc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[25e12a0]"></a>LCD_SetTextColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfdc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[25e1264]"></a>LCD_SetBackColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfdc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[25e1228]"></a>LCD_SetCursor</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25e0db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
<LI><a href="#[25e0f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawMonoPict
<LI><a href="#[25e0f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
<LI><a href="#[25e0fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[25e1048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[25e1084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[25e1174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[25e11ec]"></a>LCD_WriteRAM</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e0db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
<LI><a href="#[25e0ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[25e0f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawMonoPict
<LI><a href="#[25e0f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
<LI><a href="#[25e0fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[25e1084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[25e1174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[25e11b0]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e0db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPicture
<LI><a href="#[25e0ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBMP
<LI><a href="#[25e0f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawMonoPict
<LI><a href="#[25e0f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawCircle
<LI><a href="#[25e0fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[25e1084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[25e1174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>

<P><STRONG><a name="[25e1174]"></a>LCD_DrawChar</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_DrawChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[25e11b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[25e11ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[25e1228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[25e1138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>

<P><STRONG><a name="[25e1138]"></a>LCD_DisplayChar</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[25e10fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>

<P><STRONG><a name="[25e10fc]"></a>LCD_DisplayStringLine</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25dfdc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[25dffe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[25e0094]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[25e010c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_r
<LI><a href="#[25e10c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
</UL>

<P><STRONG><a name="[25e10c0]"></a>LCD_ClearLine</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_ClearLine &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[25e10fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Called By]<UL><LI><a href="#[25dffe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[25e1084]"></a>LCD_Clear</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[25e11b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[25e11ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[25e1228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfdc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[25e1048]"></a>LCD_SetDisplayWindow</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e1228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[25e1480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25e100c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WindowModeDisable
</UL>

<P><STRONG><a name="[25e100c]"></a>LCD_WindowModeDisable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e1048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayWindow
<LI><a href="#[25e1480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[25e0fd0]"></a>LCD_DrawLine</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e11b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[25e11ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[25e1228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[25e0f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
</UL>

<P><STRONG><a name="[25e0f94]"></a>LCD_DrawRect</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e0fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[25e0f58]"></a>LCD_DrawCircle</STRONG> (Thumb, 348 bytes, Stack size 28 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e11b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[25e11ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[25e1228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[25e0f1c]"></a>LCD_DrawMonoPict</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e11b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[25e11ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[25e1228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[25e0ee0]"></a>LCD_WriteBMP</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e11b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[25e11ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[25e1480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[25e0ea4]"></a>LCD_ReadRAM</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e1390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BusIn
<LI><a href="#[25e13cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BusOut
</UL>

<P><STRONG><a name="[25e0e68]"></a>LCD_PowerOn</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e1480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[25e14bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_LCD
</UL>

<P><STRONG><a name="[25e0e2c]"></a>LCD_DisplayOn</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e1480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[25e0df0]"></a>LCD_DisplayOff</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e1480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[25e0db4]"></a>LCD_DrawPicture</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e11b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[25e11ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[25e1228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[25e010c]"></a>adc_r</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = adc_r &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25dcaac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[25dcdb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25dcf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25dd178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[25dd484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[25de708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[25e10fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[25e3910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25e00d0]"></a>send_s</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_s
</UL>
<BR>[Calls]<UL><LI><a href="#[25e2b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[25e2e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25e0094]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
</UL>

<P><STRONG><a name="[25e0094]"></a>Time_Display</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Time_Display &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25de708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[25e00d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_s
<LI><a href="#[25e10fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25e0058]"></a>Delay_Ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25dffe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[25e001c]"></a>w_v</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = w_v &rArr; I2CWaitAck &rArr; SDA_Output_Mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[25e1d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
<LI><a href="#[25e1d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[25e1da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStart
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dffe0]"></a>key_scan</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = key_scan &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25de708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[25e0058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[25e10c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLine
<LI><a href="#[25e10fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[25e59e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dffa4]"></a>r_v</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = r_v &rArr; I2CReceiveByte &rArr; SDA_Output_Mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReceiveByte
<LI><a href="#[25e1c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSendByte
<LI><a href="#[25e1d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWaitAck
<LI><a href="#[25e1d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStop
<LI><a href="#[25e1da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CStart
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dff68]"></a>NVIC_Configuration</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e4108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[25e4144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dff2c]"></a>RTC_init</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_init &rArr; BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[25e45b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[25e45f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[25e46a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[25e46e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[25e47d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[25e4dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[25e5314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[25e6034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[25e6124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[25e6160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[25e619c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[25e6520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dfef0]"></a>USART_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[25e2fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[25e2fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[25e30dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[25e6034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[25e6070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dfeb4]"></a>adc_init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adc_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e3988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[25e3a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[25e3ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[25e3af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[25e3b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[25e3b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[25e3be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[25e3c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[25e3c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[25e6070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dfe78]"></a>LED_C</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_C
</UL>
<BR>[Calls]<UL><LI><a href="#[25e58b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[25e58f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dfe3c]"></a>LED_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[25e6070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dfe00]"></a>key_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = key_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25e5a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[25e6070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dfdc4]"></a>LCD_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_init &rArr; LCD_DisplayStringLine &rArr; LCD_DisplayChar &rArr; LCD_DrawChar &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[25e1084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[25e10fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[25e1264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBackColor
<LI><a href="#[25e12a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetTextColor
<LI><a href="#[25e12dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM3210B_LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25dfd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25dfd88]"></a>main</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = main &rArr; adc_r &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25dfdc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[25dfe00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[25dfe3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
<LI><a href="#[25dfe78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_C
<LI><a href="#[25dfeb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[25dfef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
<LI><a href="#[25dff2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[25dff68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[25dffa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_v
<LI><a href="#[25dffe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[25e001c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_v
<LI><a href="#[25e0058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[25e0094]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[25e00d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_s
<LI><a href="#[25e010c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_r
<LI><a href="#[25e10fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStringLine
<LI><a href="#[25e1c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[25e2fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[25e4720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[25db198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[25df338]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df2fc]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df2c0]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df284]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df248]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df20c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df1d0]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df194]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df158]"></a>SysTick_Handler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df11c]"></a>RTC_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_IRQHandler &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[25e44c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[25e4504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[25e45f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[25e46e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[25e4720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25df0e0]"></a>USART2_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25e2ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[25e2dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[25e2fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25e90b8]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[25ded5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[25deb04]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[25de708]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25dbfa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[25dc0d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[25dffe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[25e0094]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Display
<LI><a href="#[25e010c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_r
</UL>

<P><STRONG><a name="[25de528]"></a>_printf_int_dec</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[25dbe04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[25dc638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[25ddb14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[25dde20]"></a>__printf</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25dd9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc0d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[25dd880]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[25dd844]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[25dd808]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[25dc638]"></a>_printf_int_common</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[25de528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25dc494]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[25dc458]"></a>_printf_fp_dec_real</STRONG> (Thumb, 626 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25dbe04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[25dc4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[34f3488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[34f452c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[34f4748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[25dc0d4]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25dde20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25de708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[25dbfa8]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25de708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[25dbe04]"></a>__rt_udiv10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dc458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[25de528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[34f4748]"></a>__rt_locale</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25dc458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[34f1a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[34f461c]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[34f452c]"></a>_printf_fp_infnan</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[34f4298]"></a>_btod_etento</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[34f3b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[34f3b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[34f32e4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[34f32a8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f317c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[34f326c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[34f317c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[25e916c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[34f32a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[34f49dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[34f3014]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34f0cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[25db198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[34f2eac]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f380c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[34f0404]"></a>__rt_fp_status_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f09a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[34efedc]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f0710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[34ef720]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[34ef6e4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[34f3cf8]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[34f3c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[34f3cbc]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[34f3c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[34f3c80]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[34f3cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[34f3cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[34f3c44]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[34f3b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[34f3bcc]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[34f3b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[34f3b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[34f3b90]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[34f3bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[34f3c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[34f4298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[34f3b18]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[34f3aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[34f3bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[34f4298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[34f3aa0]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[34f3b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[34f3488]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[25dc458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[34f380c]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[34f2eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34f18e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[25dd484]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Called By]<UL><LI><a href="#[25e010c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_r
</UL>

<P><STRONG><a name="[25dd448]"></a>_d2f</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25dbbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[25dd40c]"></a>__fpl_inf_d2f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, d2f.o(x$fpl$d2f), UNUSED)

<P><STRONG><a name="[25dbd14]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck.o(x$fpl$dcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f35b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[25dcee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[25dd13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[25dbbe8]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f35b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[25dd448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[25dd178]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25e010c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_r
</UL>

<P><STRONG><a name="[25dd13c]"></a>_ddiv</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25dbd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[25dd0c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv_mantissas
</UL>

<P><STRONG><a name="[25dd100]"></a>__fpl_inf_ddiv</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ddiv.o(x$fpl$ddiv), UNUSED)

<P><STRONG><a name="[25dd0c4]"></a>_ddiv_mantissas</STRONG> (Thumb, 324 bytes, Stack size 20 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25dd13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[25dba80]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[25dba44]"></a>_dflt</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[25dba08]"></a>__dflt_normalise</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[25dcf20]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[25e010c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_r
</UL>

<P><STRONG><a name="[25dcee4]"></a>_dmul</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25dbd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[25dcea8]"></a>__fpl_inf_dmul</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dmul.o(x$fpl$dmul), UNUSED)

<P><STRONG><a name="[25db8a0]"></a>__dunder</STRONG> (Thumb, 234 bytes, Stack size 4 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[25db864]"></a>__dunder_d</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[25dcdb8]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Called By]<UL><LI><a href="#[25e010c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_r
</UL>

<P><STRONG><a name="[25dcd7c]"></a>_f2d</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25db774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[25dcd40]"></a>__fpl_inf_f2d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, f2d.o(x$fpl$f2d), UNUSED)

<P><STRONG><a name="[25db774]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f35b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[25dcd7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[25dcb60]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[25dcb24]"></a>_fflt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[25dcae8]"></a>__fflt_normalise</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fflt_clz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25dca70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[25dcaac]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[25e010c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_r
</UL>

<P><STRONG><a name="[25dca70]"></a>_ffltu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25dcae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[34f09a4]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f0404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[34f2b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[34f0968]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[25db684]"></a>__funder</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[25db648]"></a>__funder_d</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[25dc980]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25dc458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[25dda60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[34f35b4]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f0d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[25db774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[25dbbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[25dbd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[34f0d64]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34f35b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[25db594]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[25ded98]"></a>SetSysClockTo72</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, system_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25ded5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[25ded5c]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[25ded98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[25e90b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[25dc4d0]"></a>_fp_digits</STRONG> (Thumb, 492 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[34f3b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[34f3b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[34f3cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[34f4298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[34f461c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[25dc458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[25dc110]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
